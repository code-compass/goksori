plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "io.franzbecker.gradle-lombok" version "5.0.0"
}

group = 'com.codecompass'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    mapStructVersion = "1.5.5.Final"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    compileOnly 'org.projectlombok:lombok'
    compileOnly "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
}

lombok {
    version = "1.18.26"
}

test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(
                files(
                        classDirectories.files.collect {
                            fileTree(
                                    dir: it,
                                    exclude: [
                                            "com/codecompass/goksori/dto/*",
                                            "com/codecompass/goksori/config/*"
                                    ]
                            )
                        }
                )
        )
    }

    reports {
        csv.required = false
        xml.required = true
        html.required = true

        xml.outputLocation = file("build/reports/jacoco.xml")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
